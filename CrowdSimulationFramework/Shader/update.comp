
#version 450 core

#extension GL_ARB_compute_variable_group_size : enable
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable




layout(std430, binding = 0) buffer ssbo1  //for specifying joints : full
 {
	mat4 aInstanceMatrix[];
 };


layout(std430, binding = 1) buffer ssbo7  //lods
{
	int lods[];
};

layout(std430, binding = 2) buffer ssbo9  //joint number of each lod
{
	ivec3 numbers;
};


layout(std430, binding = 3) buffer ssbo2  //for specifying joints : full
 {
	mat4 aInstanceMatrix2[];
 };



 layout(std430, binding = 4) buffer ssbo3  //for specifying joints : full
 {
	mat4 aInstanceMatrix3[];
 };


layout(std430, binding = 5) buffer ssbo5  //current Orientation
{
	float rot[];
};



//ang : euler angle
mat4 build_transform(vec3 pos, vec3 ang) 
{
  float cosX = cos(ang.x);
  float sinX = sin(ang.x);
  float cosY = cos(ang.y);
  float sinY = sin(ang.y);
  float cosZ = cos(ang.z);
  float sinZ = sin(ang.z);

  mat4 m;

  float m00 = cosY * cosZ + sinX * sinY * sinZ; 
  float m01 = cosY * sinZ - sinX * sinY * cosZ; 
  float m02 = cosX * sinY;
  float m03 = 0.0;
  
  float m04 = -cosX * sinZ; 
  float m05 = cosX * cosZ; 
  float m06 = sinX;
  float m07 = 0.0;
  
  float m08 = sinX * cosY * sinZ - sinY * cosZ;
  float m09 = -sinY * sinZ - sinX * cosY * cosZ;
  float m10 = cosX * cosY;
  float m11 = 0.0;
  
  float m12 = pos.x;
  float m13 = pos.y;
  float m14 = pos.z;
  float m15 = 1.0;

  /*
  //------ Orientation ---------------------------------
  m[0] = vec4(m00, m01, m02, m03); // first column.
  m[1] = vec4(m04, m05, m06, m07); // second column.
  m[2] = vec4(m08, m09, m10, m11); // third column.

  //------ Position ------------------------------------
  m[3] = vec4(m12, m13, m14, m15); // fourth column.
  */

  //------ Orientation ---------------------------------
  m[0][0] = m00; // first entry of the first column.
  m[0][1] = m01; // second entry of the first column.
  m[0][2] = m02;
  m[0][3] = m03;
  
  m[1][0] = m04; // first entry of the second column.
  m[1][1] = m05; // second entry of the second column.
  m[1][2] = m06;
  m[1][3] = m07;

  m[2][0] = m08; // first entry of the third column.
  m[2][1] = m09; // second entry of the third column.
  m[2][2] = m10;
  m[2][3] = m11;
  
  //------ Position ------------------------------------
  m[3][0] = m12; // first entry of the fourth column.
  m[3][1] = m13; // second entry of the fourth column.
  m[3][2] = m14;
  m[3][3] = m15;

  return m;
}



uniform uint numChar;
uniform mat4 viewMatrix;
uniform vec2 resolution;
uniform uint startIndex;
uniform vec3 viewPos;
uniform vec3 lightDir;


//layout (local_size_x = 16, local_size_y = 16) 
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
 
// tanHalfFOV = tan(glm::radians(fov) / 2.0f);  1.0f / tanHalfFOV => focal length
// http://www.iquilezles.org/www/articles/sphereproj/sphereproj.htm


float projectSphere(vec4 sph,  // sphere in world space (x,y,z : position, w:radius)
                    mat4 cam,  // camera matrix (world to camera)
                    float fl ) // projection (focal length)
{
    // transform to camera space
    vec3  o = (cam*vec4(sph.xyz,1.0)).xyz;

    float r2 = sph.w*sph.w;
    float z2 = o.z*o.z;  //프로젝션 후에 z 값,
    float l2 = dot(o,o); //중심의 좌표끼리의 dot 
	
	/*
	// axis
	vec2 axa = fl*sqrt  (-r2*  (r2-l2)  /   (   (l2-z2)*(r2-z2)*(r2-z2))  )    *vec2( o.x,o.y);
	vec2 axb = fl*sqrt  (-r2*  (r2-l2)  /   (   (l2-z2)*(r2-z2)*(r2-l2))  )    *vec2(-o.y,o.x);

    float area = length(axa)*length(axb)*3.141593;	
	
	// center
	vec2  cen = fl*o.z*o.xy/(z2-r2);
	
	*/
    float area2 = -3.14159*fl*fl*r2*   sqrt( abs(   (l2-r2)/(r2-z2)    ))  /   (r2-z2);

	return area2;
	//return area;
}


mat4 rotationMatrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}


 
    
mat4 scaleMatrix = mat4(0.1f, 0.0 ,0.0,  0.0,
	            0.0, 0.1f, 0.0, 0.0,
				0.0, 0.0, 0.1f, 0.0,
                0.0, 0.0, 0.0,1.0);



mat4 translationMatrix(vec3 o)
{
    mat4 translation;
	vec4 t1 = vec4(1.,0.,0.,0.);
	vec4 t2 = vec4(0.,1.,0.,0.);
	vec4 t3 = vec4(0.,0.,1.,0.);
	vec4 t4 = vec4(o,1.);


    translation[0] = t1;
	translation[1] = t2;
	translation[2] = t3;
	translation[3] = t4;
	    
	return translation;

}



shared ivec3 sum = ivec3(0,0,0);
shared int lod1 = 0;
shared int lod2 = 0;

void main() 
{
 		
	uint cc = gl_GlobalInvocationID.x;  
	

	uint index = (cc+startIndex) % numChar;
	mat4 model2  = aInstanceMatrix[index];
	mat4 rotMatrix = rotationMatrix(vec3(0,1,0),radians(rot[index]));


   // vec4 d = rotMatrix * vec4(0,0,0.7,1);
	vec4 d = rotMatrix * vec4(0,0,0.5,1);

	
	vec4 test = model2[3];

	test.xyz += d.xyz;

	aInstanceMatrix[index] = rotMatrix *  scaleMatrix;
	aInstanceMatrix[index][3] = test;


	vec3 c1 = vec3(test.x, 0, test.z);
	c1 = normalize(c1);
    vec3 dir = cross(vec3(0, 1, 0),c1);
	float degree = degrees(atan(dir.x, dir.z));
	
	rot[cc] = -degree;


	test.w = 2.0f;
	float focalLength =  1.0f;

	vec3 v = viewPos - test.xyz;
	 v = normalize(v);
	float dotNV = max(dot(v,vec3(0,1,0)),0);
//	float scale = mix(0.3,1.4,dotNV);

	vec3 l = normalize(lightDir);
	float shadowSize = 1.0f / tan(dot(l, vec3(0, 1, 0)));


	float fov = 1.0;

    vec3 ta = vec3( 0.0, 0.0, 0.0 );
	vec3 ww = normalize( ta - viewPos );
    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );
    vec3 vv = normalize( cross(uu,ww));
	mat4 cam = mat4( uu.x, uu.y, uu.z, 0.0,
					 vv.x, vv.y, vv.z, 0.0,
					 ww.x, ww.y, ww.z, 0.0,
					 -dot(uu,viewPos), -dot(vv,viewPos), -dot(ww,viewPos), 1.0 );


	float scale = 1.0 / shadowSize; 

	
    float s = projectSphere(test,cam,focalLength);
    s = s * resolution.x * resolution.y * 0.25f;

	

	lods[cc] = 1;

	if (s < 300*scale)
		lods[cc] = 2;
	if (s <  30*scale)
		lods[cc] = 3;

	
//	rot[cc] -= 0.01;

//	if (rot[index] < 0) rot[index] = 360;



//무조건 fake로...
	lods[cc] = 3;

	
	//////////////////////  I don't like following part /////////////////////////

	barrier();

	
	//counting characters

	if (cc == 0) {

		for (int i=0; i<numChar; ++i) {
		   
		  

		    bvec3 test = bvec3((lods[i] == 1), (lods[i] == 2), (lods[i] == 3));
			ivec3 iTest = ivec3(test);
		
		    sum += iTest;
		
			
		    if (lods[i] == 1) {
				aInstanceMatrix2[lod1] = aInstanceMatrix[i];
				lod1 += 1;
			}
			else if (lods[i] == 2) {
				aInstanceMatrix2[lod1] = aInstanceMatrix[i];
				lod1 += 1;
			}
			else if  (lods[i] == 3) {
				aInstanceMatrix3[lod2] = aInstanceMatrix[i];
				lod2 += 1;
			}
			

		//	int ll = iTest.x * 1 + iTest.y * 2 +  iTest.z * 3;
								    	
   		}
		numbers = sum;
	}
	
}